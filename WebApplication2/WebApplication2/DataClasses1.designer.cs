#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_user;
		
		private string _FIO_user;
		
		private string _login_use;
		
		private System.Nullable<int> _age_user;
		
		private string _phone_user;
		
		private System.Data.Linq.Binary _foto_user;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_userChanging(int value);
    partial void OnID_userChanged();
    partial void OnFIO_userChanging(string value);
    partial void OnFIO_userChanged();
    partial void Onlogin_useChanging(string value);
    partial void Onlogin_useChanged();
    partial void Onage_userChanging(System.Nullable<int> value);
    partial void Onage_userChanged();
    partial void Onphone_userChanging(string value);
    partial void Onphone_userChanged();
    partial void Onfoto_userChanging(System.Data.Linq.Binary value);
    partial void Onfoto_userChanged();
    #endregion
		
		public Users()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_user", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_user
		{
			get
			{
				return this._ID_user;
			}
			set
			{
				if ((this._ID_user != value))
				{
					this.OnID_userChanging(value);
					this.SendPropertyChanging();
					this._ID_user = value;
					this.SendPropertyChanged("ID_user");
					this.OnID_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO_user", DbType="NVarChar(50)")]
		public string FIO_user
		{
			get
			{
				return this._FIO_user;
			}
			set
			{
				if ((this._FIO_user != value))
				{
					this.OnFIO_userChanging(value);
					this.SendPropertyChanging();
					this._FIO_user = value;
					this.SendPropertyChanged("FIO_user");
					this.OnFIO_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login_use", DbType="VarChar(MAX)")]
		public string login_use
		{
			get
			{
				return this._login_use;
			}
			set
			{
				if ((this._login_use != value))
				{
					this.Onlogin_useChanging(value);
					this.SendPropertyChanging();
					this._login_use = value;
					this.SendPropertyChanged("login_use");
					this.Onlogin_useChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age_user", DbType="Int")]
		public System.Nullable<int> age_user
		{
			get
			{
				return this._age_user;
			}
			set
			{
				if ((this._age_user != value))
				{
					this.Onage_userChanging(value);
					this.SendPropertyChanging();
					this._age_user = value;
					this.SendPropertyChanged("age_user");
					this.Onage_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_user", DbType="VarChar(MAX)")]
		public string phone_user
		{
			get
			{
				return this._phone_user;
			}
			set
			{
				if ((this._phone_user != value))
				{
					this.Onphone_userChanging(value);
					this.SendPropertyChanging();
					this._phone_user = value;
					this.SendPropertyChanged("phone_user");
					this.Onphone_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foto_user", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary foto_user
		{
			get
			{
				return this._foto_user;
			}
			set
			{
				if ((this._foto_user != value))
				{
					this.Onfoto_userChanging(value);
					this.SendPropertyChanging();
					this._foto_user = value;
					this.SendPropertyChanged("foto_user");
					this.Onfoto_userChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
